#!python
#cython: boundscheck=False
#cython: wraparound=False
#cython: initializedcheck=True
#cython: cdivision=False

import numpy as np
include "parameters.pxi"
from thermodynamic_functions cimport  *
from microphysics_functions cimport  *
import cython
cimport Grid
cimport ReferenceState
cimport EDMF_Rain
from Variables cimport GridMeanVariables
from NetCDFIO cimport NetCDFIO_Stats
from EDMF_Environment cimport EnvironmentVariables
from libc.math cimport fmax, fmin

cdef class UpdraftVariable:
    def __init__(self, nu, nz, loc, kind, name, units):
        self.values = np.zeros((nu,nz),dtype=np.double, order='c')
        self.old = np.zeros((nu,nz),dtype=np.double, order='c')  # needed for prognostic updrafts
        self.new = np.zeros((nu,nz),dtype=np.double, order='c') # needed for prognostic updrafts
        self.tendencies = np.zeros((nu,nz),dtype=np.double, order='c')
        self.flux = np.zeros((nu,nz),dtype=np.double, order='c')
        self.bulkvalues = np.zeros((nz,), dtype=np.double, order = 'c')
        if loc != 'half' and loc != 'full':
            print('Invalid location setting for variable! Must be half or full')
        self.loc = loc
        if kind != 'scalar' and kind != 'velocity':
            print ('Invalid kind setting for variable! Must be scalar or velocity')
        self.kind = kind
        self.name = name
        self.units = units

    cpdef set_bcs(self,Grid.Grid Gr):
        cdef:
            Py_ssize_t i,k
            Py_ssize_t start_low = Gr.gw - 1
            Py_ssize_t start_high = Gr.nzg - Gr.gw - 1

        n_updrafts = np.shape(self.values)[0]

        if self.name == 'w':
            for i in xrange(n_updrafts):
                self.values[i,start_high] = 0.0
                self.values[i,start_low] = 0.0
                for k in xrange(1,Gr.gw):
                    self.values[i,start_high+ k] = -self.values[i,start_high - k ]
                    self.values[i,start_low- k] = -self.values[i,start_low + k  ]
        else:
            for k in xrange(Gr.gw):
                for i in xrange(n_updrafts):
                    self.values[i,start_high + k +1] = self.values[i,start_high  - k]
                    self.values[i,start_low - k] = self.values[i,start_low + 1 + k]

        return


cdef class UpdraftVariables:
    def __init__(self, nu, namelist, paramlist, Grid.Grid Gr):
        self.Gr = Gr
        self.n_updrafts = nu
        cdef:
            Py_ssize_t nzg = Gr.nzg
            Py_ssize_t i, k

        self.W    = UpdraftVariable(nu, nzg, 'full', 'velocity', 'w','m/s' )

        self.Area = UpdraftVariable(nu, nzg, 'half', 'scalar', 'area_fraction','[-]' )
        self.QT = UpdraftVariable(nu, nzg, 'half', 'scalar', 'qt','kg/kg' )
        self.QL = UpdraftVariable(nu, nzg, 'half', 'scalar', 'ql','kg/kg' )
        self.RH = UpdraftVariable(nu, nzg, 'half', 'scalar', 'RH','%' )

        if namelist['thermodynamics']['thermal_variable'] == 'entropy':
            self.H = UpdraftVariable(nu, nzg, 'half', 'scalar', 's','J/kg/K' )
        elif namelist['thermodynamics']['thermal_variable'] == 'thetal':
            self.H = UpdraftVariable(nu, nzg, 'half', 'scalar', 'thetal','K' )

        self.THL = UpdraftVariable(nu, nzg, 'half', 'scalar', 'thetal', 'K')
        self.T   = UpdraftVariable(nu, nzg, 'half', 'scalar', 'temperature','K' )
        self.B   = UpdraftVariable(nu, nzg, 'half', 'scalar', 'buoyancy','m^2/s^3' )

        if namelist['turbulence']['scheme'] == 'EDMF_PrognosticTKE':
            try:
                use_steady_updrafts = namelist['turbulence']['EDMF_PrognosticTKE']['use_steady_updrafts']
            except:
                use_steady_updrafts = False
            if use_steady_updrafts:
                self.prognostic = False
            else:
                self.prognostic = True
            self.updraft_fraction = paramlist['turbulence']['EDMF_PrognosticTKE']['surface_area']
        else:
            self.prognostic = False
            self.updraft_fraction = paramlist['turbulence']['EDMF_BulkSteady']['surface_area']

        # cloud and rain diagnostics for output
        self.cloud_fraction = np.zeros((nzg,), dtype=np.double, order='c')

        self.cloud_base     = np.zeros((nu,),  dtype=np.double, order='c')
        self.cloud_top      = np.zeros((nu,),  dtype=np.double, order='c')
        self.cloud_cover    = np.zeros((nu,),  dtype=np.double, order='c')
        self.updraft_top    = np.zeros((nu,),  dtype=np.double, order='c')

        self.lwp = 0.
        return

    cpdef initialize(self, GridMeanVariables GMV):
        cdef:
            Py_ssize_t i,k
            Py_ssize_t gw = self.Gr.gw
            double dz = self.Gr.dz

        with nogil:
            for i in xrange(self.n_updrafts):
                for k in xrange(self.Gr.nzg):
                    self.W.values[i,k] = 0.0
                    # Simple treatment for now, revise when multiple updraft closures
                    # become more well defined
                    if self.prognostic:
                        self.Area.values[i,k] = 0.0 #self.updraft_fraction/self.n_updrafts
                    else:
                        self.Area.values[i,k] = self.updraft_fraction/self.n_updrafts
                    self.QT.values[i,k] = GMV.QT.values[k]
                    self.QL.values[i,k] = GMV.QL.values[k]
                    self.H.values[i,k]  = GMV.H.values[k]
                    self.T.values[i,k]  = GMV.T.values[k]
                    self.B.values[i,k]  = 0.0

                self.Area.values[i,gw] = self.updraft_fraction/self.n_updrafts

        self.QT.set_bcs(self.Gr)
        self.H.set_bcs(self.Gr)

        return

    cpdef initialize_DryBubble(self, GridMeanVariables GMV, ReferenceState.ReferenceState Ref):
        cdef:
            Py_ssize_t i,k
            Py_ssize_t gw = self.Gr.gw
            double dz = self.Gr.dz

        # criterion 2: b>1e-4
        z_in = np.array([
                          75.,  125.,  175.,  225.,  275.,  325.,  375.,  425.,  475.,
                         525.,  575.,  625.,  675.,  725.,  775.,  825.,  875.,  925.,
                         975., 1025., 1075., 1125., 1175., 1225., 1275., 1325., 1375.,
                        1425., 1475., 1525., 1575., 1625., 1675., 1725., 1775., 1825.,
                        1875., 1925., 1975., 2025., 2075., 2125., 2175., 2225., 2275.,
                        2325., 2375., 2425., 2475., 2525., 2575., 2625., 2675., 2725.,
                        2775., 2825., 2875., 2925., 2975., 3025., 3075., 3125., 3175.,
                        3225., 3275., 3325., 3375., 3425., 3475., 3525., 3575., 3625.,
                        3675., 3725., 3775., 3825., 3875., 3925.
        ])

        thetal_in = np.array([
                        299.9882, 299.996 , 300.0063, 300.0205, 300.04  , 300.0594,
                        300.0848, 300.1131, 300.1438, 300.1766, 300.2198, 300.2567,
                        300.2946, 300.3452, 300.3849, 300.4245, 300.4791, 300.5182,
                        300.574 , 300.6305, 300.6668, 300.7222, 300.7771, 300.8074,
                        300.8591, 300.9092, 300.9574, 300.9758, 301.0182, 301.0579,
                        301.0944, 301.1276, 301.1572, 301.1515, 301.1729, 301.1902,
                        301.2033, 301.2122, 301.2167, 301.2169, 301.2127, 301.2041,
                        301.1913, 301.1743, 301.1533, 301.1593, 301.1299, 301.097 ,
                        301.0606, 301.0212, 300.9788, 300.9607, 300.9125, 300.8625,
                        300.8108, 300.7806, 300.7256, 300.6701, 300.6338, 300.5772,
                        300.5212, 300.482 , 300.4272, 300.3875, 300.3354, 300.2968,
                        300.2587, 300.2216, 300.1782, 300.1452, 300.1143, 300.0859,
                        300.0603, 300.0408, 300.0211, 300.0067, 299.9963, 299.9884
        ])

        Area_in = np.array([
                        0.04 , 0.055, 0.07 , 0.08 , 0.085, 0.095, 0.1  , 0.105, 0.11 ,
                        0.115, 0.115, 0.12 , 0.125, 0.125, 0.13 , 0.135, 0.135, 0.14 ,
                        0.14 , 0.14 , 0.145, 0.145, 0.145, 0.15 , 0.15 , 0.15 , 0.15 ,
                        0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.16 , 0.16 , 0.16 ,
                        0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 ,
                        0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.15 , 0.15 , 0.15 ,
                        0.15 , 0.145, 0.145, 0.145, 0.14 , 0.14 , 0.14 , 0.135, 0.135,
                        0.13 , 0.13 , 0.125, 0.12 , 0.115, 0.115, 0.11 , 0.105, 0.1  ,
                        0.095, 0.085, 0.08 , 0.07 , 0.055, 0.04
        ])

        # W_in = np.array([
        #                 0.017 , 0.0266, 0.0344, 0.0417, 0.0495, 0.0546, 0.061 , 0.0668,
        #                 0.0721, 0.0768, 0.0849, 0.0887, 0.092 , 0.0996, 0.1019, 0.1037,
        #                 0.1106, 0.1114, 0.1179, 0.1243, 0.1238, 0.1297, 0.1355, 0.1335,
        #                 0.1387, 0.1437, 0.1485, 0.1448, 0.1489, 0.1527, 0.1564, 0.1597,
        #                 0.1628, 0.1565, 0.1588, 0.1609, 0.1626, 0.1641, 0.1652, 0.166 ,
        #                 0.1665, 0.1667, 0.1666, 0.1662, 0.1655, 0.1736, 0.1722, 0.1706,
        #                 0.1686, 0.1664, 0.1639, 0.1698, 0.1667, 0.1634, 0.1599, 0.1641,
        #                 0.1601, 0.1559, 0.1589, 0.1543, 0.1496, 0.1514, 0.1464, 0.1475,
        #                 0.1422, 0.1425, 0.1424, 0.1419, 0.1361, 0.135 , 0.1335, 0.1316,
        #                 0.1294, 0.1302, 0.1271, 0.1264, 0.1269, 0.1256
        # ])

        W_in = np.array([
                        0.0255, 0.04  , 0.0516, 0.0625, 0.0743, 0.0819, 0.0915, 0.1002,
                        0.1082, 0.1152, 0.1273, 0.1331, 0.138 , 0.142 , 0.1529, 0.1555,
                        0.1659, 0.1671, 0.1769, 0.1865, 0.1857, 0.1945, 0.2032, 0.2003,
                        0.2081, 0.2156, 0.2227, 0.2171, 0.2233, 0.2291, 0.2345, 0.2396,
                        0.2442, 0.2347, 0.2382, 0.2413, 0.2439, 0.2461, 0.2478, 0.249 ,
                        0.2498, 0.25  , 0.2499, 0.2492, 0.2482, 0.2604, 0.2583, 0.2558,
                        0.2529, 0.2495, 0.2458, 0.2546, 0.25  , 0.245 , 0.2398, 0.2461,
                        0.2401, 0.2338, 0.2383, 0.2314, 0.2243, 0.2271, 0.2195, 0.2212,
                        0.2132, 0.2138, 0.2136, 0.2128, 0.2041, 0.2024, 0.2002, 0.1974,
                        0.1941, 0.1953, 0.1907, 0.1896, 0.1904, 0.1884
        ])

        T_in = np.array([
                        299.2557, 298.775 , 298.2969, 297.8227, 297.3536, 296.8843,
                        296.421 , 295.9603, 295.502 , 295.0456, 294.5994, 294.1468,
                        293.6951, 293.2556, 292.8054, 292.3549, 291.9188, 291.4677,
                        291.0325, 290.5978, 290.1434, 289.7073, 289.2706, 288.81  ,
                        288.3698, 287.928 , 287.4842, 287.0118, 286.5622, 286.1099,
                        285.6544, 285.1957, 284.7335, 284.2379, 283.7677, 283.2937,
                        282.8157, 282.3337, 281.8476, 281.3574, 280.8631, 280.3649,
                        279.8626, 279.3565, 278.8467, 278.362 , 277.8447, 277.3241,
                        276.8006, 276.2742, 275.7454, 275.2388, 274.705 , 274.1694,
                        273.6327, 273.1155, 272.576 , 272.0363, 271.514 , 270.9736,
                        270.4339, 269.9094, 269.3711, 268.8465, 268.311 , 267.7877,
                        267.2649, 266.7432, 266.2159, 265.698 , 265.1821, 264.6685,
                        264.1574, 263.6518, 263.1461, 262.6451, 262.1476, 261.6524
        ])

        z_800 = np.array([
                         325.,  375.,  425.,  475.,  525.,  575.,  625.,  675.,  725.,
                         775.,  825.,  875.,  925.,  975., 1025., 1075., 1125., 1175.,
                        1225., 1275., 1325., 1375., 1425., 1475., 1525., 1575., 1625.,
                        1675., 1725., 1775., 1825., 1875., 1925., 1975., 2025., 2075.,
                        2125., 2175., 2225., 2275., 2325., 2375., 2425., 2475., 2525.,
                        2575., 2625., 2675., 2725., 2775., 2825., 2875., 2925., 2975.,
                        3025., 3075., 3125., 3175., 3225., 3275., 3325., 3375., 3425.,
                        3475., 3525., 3575., 3625., 3675., 3725., 3775., 3825., 3875.,
                        3925., 3975., 4025., 4075., 4125., 4175., 4225., 4275., 4325.,
                        4375., 4425., 4475., 4525., 4575., 4625., 4675., 4725., 4775.,
                        4825., 4875., 4925., 4975., 5025., 5075., 5125., 5175., 5225.,
                        5275., 5325., 5375., 5425., 5475., 5525., 5575., 5625., 5675.,
                        5725., 5775., 5825., 5875., 5925., 5975., 6025., 6075., 6125.,
                        6175., 6225., 6275., 6325., 6375., 6425., 6475., 6525., 6575.,
                        6625., 6675., 6725., 6775., 6825., 6875., 6925., 6975., 7025.,
                        7075., 7125., 7175.
        ])

        Area_800 = np.array([
                        0.005, 0.005, 0.005, 0.01 , 0.01 , 0.01 , 0.01 , 0.01 , 0.01 ,
                        0.01 , 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015,
                        0.015, 0.02 , 0.02 , 0.02 , 0.02 , 0.02 , 0.02 , 0.02 , 0.02 ,
                        0.02 , 0.02 , 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025,
                        0.025, 0.025, 0.03 , 0.03 , 0.03 , 0.03 , 0.03 , 0.03 , 0.03 ,
                        0.03 , 0.03 , 0.03 , 0.03 , 0.035, 0.035, 0.035, 0.035, 0.035,
                        0.035, 0.035, 0.035, 0.035, 0.035, 0.035, 0.035, 0.035, 0.165,
                        0.19 , 0.2  , 0.2  , 0.205, 0.21 , 0.215, 0.22 , 0.225, 0.23 ,
                        0.235, 0.24 , 0.24 , 0.245, 0.25 , 0.25 , 0.25 , 0.255, 0.255,
                        0.26 , 0.26 , 0.26 , 0.26 , 0.265, 0.265, 0.265, 0.265, 0.265,
                        0.265, 0.265, 0.265, 0.265, 0.265, 0.265, 0.26 , 0.26 , 0.26 ,
                        0.26 , 0.255, 0.255, 0.255, 0.25 , 0.25 , 0.25 , 0.245, 0.245,
                        0.24 , 0.235, 0.235, 0.23 , 0.23 , 0.225, 0.22 , 0.215, 0.21 ,
                        0.205, 0.2  , 0.195, 0.19 , 0.185, 0.18 , 0.175, 0.17 , 0.16 ,
                        0.155, 0.145, 0.135, 0.125, 0.115, 0.105, 0.095, 0.085, 0.08 ,
                        0.075, 0.07 , 0.05
        ])

        thetal_800 = np.array([
                        299.9856, 299.9864, 299.9873, 299.9867, 299.9875, 299.9884,
                        299.9893, 299.9904, 299.9915, 299.9927, 299.991 , 299.992 ,
                        299.9931, 299.9942, 299.9953, 299.9965, 299.9976, 299.9988,
                        300.0001, 299.9973, 299.9983, 299.9993, 300.0003, 300.0013,
                        300.0023, 300.0033, 300.0043, 300.0053, 300.0062, 300.0028,
                        300.0036, 300.0044, 300.0051, 300.0058, 300.0065, 300.0072,
                        300.0079, 300.0085, 300.0053, 300.0058, 300.0063, 300.0068,
                        300.0073, 300.0078, 300.0082, 300.0087, 300.0091, 300.0095,
                        300.01  , 300.0069, 300.0073, 300.0076, 300.008 , 300.0084,
                        300.0088, 300.0092, 300.0096, 300.01  , 300.0105, 300.0109,
                        300.0114, 300.0119, 299.9904, 299.9928, 300.005 , 300.0556,
                        300.2007, 300.3621, 300.4557, 300.504 , 300.5258, 300.5326,
                        300.5306, 300.523 , 300.5205, 300.5067, 300.4907, 300.4815,
                        300.4702, 300.4526, 300.4422, 300.4267, 300.4201, 300.4154,
                        300.4124, 300.4053, 300.4057, 300.4069, 300.4087, 300.411 ,
                        300.4141, 300.4179, 300.4224, 300.4277, 300.4339, 300.4408,
                        300.4554, 300.4646, 300.4744, 300.4848, 300.5035, 300.5163,
                        300.5294, 300.5518, 300.5672, 300.5827, 300.6094, 300.6269,
                        300.6568, 300.6878, 300.71  , 300.7455, 300.7697, 300.8104,
                        300.8539, 300.9006, 300.9505, 301.0038, 301.0606, 301.1206,
                        301.1832, 301.2471, 301.3109, 301.3719, 301.427 , 301.5137,
                        301.5493, 301.6135, 301.6537, 301.6522, 301.5851, 301.4205,
                        301.1077, 300.6549, 300.24  , 300.0518, 300.0009, 299.9884
        ])

        W_800 = np.array([
                        0.409 , 0.479 , 0.5508, 0.6005, 0.6721, 0.7457, 0.8213, 0.8988,
                        0.9784, 1.0601, 1.0986, 1.1798, 1.263 , 1.3483, 1.4357, 1.5253,
                        1.6172, 1.7113, 1.8077, 1.844 , 1.9417, 2.0421, 2.1451, 2.2509,
                        2.3597, 2.4714, 2.5862, 2.7043, 2.8257, 2.8781, 3.0043, 3.1343,
                        3.2684, 3.4067, 3.5494, 3.6967, 3.8487, 4.0057, 4.0904, 4.2557,
                        4.4264, 4.6029, 4.7853, 4.9738, 5.1685, 5.3695, 5.5771, 5.7913,
                        6.0123, 6.1503, 6.3829, 6.6224, 6.8689, 7.1224, 7.3826, 7.6496,
                        7.9232, 8.2029, 8.4886, 8.7797, 9.0757, 9.3761, 7.6791, 7.006 ,
                        6.8297, 7.0936, 7.0992, 7.0768, 7.0265, 6.9504, 6.8514, 6.7323,
                        6.5957, 6.4438, 6.567 , 6.3892, 6.2006, 6.2881, 6.3638, 6.1471,
                        6.2039, 5.9724, 6.0117, 6.0423, 6.064 , 5.8107, 5.819 , 5.8201,
                        5.8142, 5.8016, 5.7825, 5.7574, 5.7265, 5.6901, 5.6484, 5.6017,
                        5.7827, 5.7235, 5.6598, 5.5919, 5.7391, 5.6609, 5.5785, 5.7012,
                        5.6098, 5.5145, 5.6148, 5.5111, 5.5953, 5.6674, 5.5527, 5.6109,
                        5.4882, 5.5329, 5.5677, 5.5927, 5.6084, 5.6153, 5.6141, 5.6053,
                        5.589 , 5.5656, 5.5351, 5.4972, 5.452 , 5.5039, 5.4423, 5.4662,
                        5.4729, 5.4635, 5.4383, 5.3976, 5.3412, 5.2696, 5.1381, 5.0045,
                        4.8703, 4.8277
        ])


        z_600 = np.array([
                         225.,  275.,  325.,  375.,  425.,  475.,  525.,  575.,  625.,
                         675.,  725.,  775.,  825.,  875.,  925.,  975., 1025., 1075.,
                        1125., 1175., 1225., 1275., 1325., 1375., 1425., 1475., 1525.,
                        1575., 1625., 1675., 1725., 1775., 1825., 1875., 1925., 1975.,
                        2025., 2075., 2125., 2175., 2225., 2275., 2325., 2375., 2425.,
                        2475., 2525., 2575., 2625., 2675., 2725., 2775., 2825., 2875.,
                        2925., 2975., 3025., 3075., 3125., 3175., 3225., 3275., 3325.,
                        3375., 3425., 3475., 3525., 3575., 3625., 3675., 3725., 3775.,
                        3825., 3875., 3925., 3975., 4025., 4075., 4125., 4175., 4225.,
                        4275., 4325., 4375., 4425., 4475., 4525., 4575., 4625., 4675.,
                        4725., 4775., 4825., 4875., 4925., 4975., 5025., 5075., 5125.,
                        5175., 5225., 5275., 5325., 5375., 5425., 5475., 5525., 5575.,
                        5625., 5675., 5725., 5775., 5825., 5875., 5925., 5975., 6025.
        ])

        Area_600 = np.array([
                        0.005, 0.01 , 0.01 , 0.01 , 0.01 , 0.015, 0.015, 0.015, 0.02 ,
                        0.02 , 0.02 , 0.02 , 0.025, 0.025, 0.025, 0.025, 0.03 , 0.03 ,
                        0.03 , 0.035, 0.035, 0.035, 0.04 , 0.04 , 0.045, 0.045, 0.05 ,
                        0.05 , 0.055, 0.06 , 0.06 , 0.065, 0.065, 0.07 , 0.075, 0.075,
                        0.08 , 0.085, 0.09 , 0.09 , 0.095, 0.1  , 0.105, 0.11 , 0.11 ,
                        0.115, 0.12 , 0.125, 0.13 , 0.135, 0.14 , 0.145, 0.15 , 0.155,
                        0.16 , 0.165, 0.165, 0.17 , 0.175, 0.18 , 0.18 , 0.185, 0.185,
                        0.19 , 0.19 , 0.195, 0.195, 0.2  , 0.2  , 0.2  , 0.2  , 0.205,
                        0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205, 0.205,
                        0.205, 0.2  , 0.2  , 0.2  , 0.2  , 0.195, 0.195, 0.195, 0.19 ,
                        0.19 , 0.185, 0.185, 0.18 , 0.18 , 0.175, 0.17 , 0.17 , 0.165,
                        0.16 , 0.155, 0.15 , 0.145, 0.14 , 0.135, 0.125, 0.12 , 0.11 ,
                        0.105, 0.095, 0.085, 0.08 , 0.07 , 0.07 , 0.06 , 0.05 , 0.025
        ])

        thetal_600 = np.array([
                        299.9856, 299.9859, 299.987 , 299.9884, 299.99  , 299.9897,
                        299.9914, 299.9932, 299.9927, 299.9946, 299.9965, 299.9986,
                        299.9978, 299.9998, 300.002 , 300.0042, 300.0031, 300.0053,
                        300.0075, 300.0065, 300.0086, 300.0109, 300.0099, 300.0121,
                        300.0114, 300.0136, 300.0131, 300.0154, 300.0151, 300.015 ,
                        300.0174, 300.0176, 300.0203, 300.0207, 300.0214, 300.0246,
                        300.0258, 300.0272, 300.0289, 300.0332, 300.0357, 300.0386,
                        300.042 , 300.0461, 300.0536, 300.0596, 300.0667, 300.0752,
                        300.0855, 300.0979, 300.1129, 300.1307, 300.1517, 300.176 ,
                        300.2034, 300.2332, 300.272 , 300.3048, 300.3372, 300.3678,
                        300.406 , 300.4322, 300.4657, 300.4864, 300.5152, 300.5306,
                        300.5555, 300.5662, 300.5881, 300.6087, 300.6281, 300.6338,
                        300.6521, 300.6701, 300.6877, 300.7053, 300.7229, 300.7406,
                        300.7584, 300.7765, 300.7949, 300.8135, 300.8491, 300.8697,
                        300.8904, 300.9111, 300.9515, 300.9746, 300.997 , 301.0421,
                        301.0664, 301.1144, 301.1397, 301.191 , 301.2156, 301.2698,
                        301.3247, 301.3462, 301.4012, 301.4553, 301.5074, 301.5558,
                        301.5982, 301.6315, 301.6514, 301.7117, 301.6884, 301.6915,
                        301.5768, 301.4571, 301.2246, 300.792 , 300.3858, 300.0975,
                        300.0148, 299.9915, 299.9858
        ])

        W_600 = np.array([
                        0.4221, 0.5126, 0.6148, 0.7204, 0.8296, 0.9169, 1.0301, 1.1476,
                        1.2346, 1.3566, 1.4835, 1.6153, 1.7057, 1.8437, 1.9876, 2.1375,
                        2.2351, 2.3933, 2.5587, 2.6642, 2.8396, 3.023 , 3.1377, 3.3329,
                        3.4535, 3.6613, 3.7872, 4.0084, 4.1386, 4.2685, 4.5073, 4.6395,
                        4.8924, 5.0256, 5.1559, 5.4259, 5.5553, 5.6803, 5.8006, 6.0889,
                        6.2057, 6.3164, 6.4203, 6.5169, 6.8212, 6.9096, 6.9882, 7.0561,
                        7.1118, 7.1539, 7.1811, 7.1916, 7.1841, 7.1572, 7.1099, 7.0415,
                        7.284 , 7.1787, 7.0516, 6.9039, 7.0901, 6.9054, 7.0639, 6.8448,
                        6.9746, 6.7249, 6.8263, 6.5512, 6.6254, 6.6876, 6.7372, 6.4178,
                        6.4442, 6.4594, 6.4635, 6.4567, 6.4395, 6.4122, 6.3753, 6.3293,
                        6.2747, 6.2119, 6.4517, 6.3691, 6.279 , 6.1822, 6.3673, 6.2546,
                        6.1354, 6.2814, 6.1483, 6.2664, 6.1208, 6.2137, 6.0562, 6.1259,
                        6.1791, 6.005 , 6.0379, 6.0562, 6.0607, 6.0517, 6.0299, 5.9957,
                        5.9494, 6.0384, 5.9627, 6.0023, 5.8988, 5.8927, 5.8586, 5.7141,
                        5.6393, 5.4098, 5.3132, 5.197 , 5.1502
        ])


        z_400 = np.array([
                         125.,  175.,  225.,  275.,  325.,  375.,  425.,  475.,  525.,
                         575.,  625.,  675.,  725.,  775.,  825.,  875.,  925.,  975.,
                        1025., 1075., 1125., 1175., 1225., 1275., 1325., 1375., 1425.,
                        1475., 1525., 1575., 1625., 1675., 1725., 1775., 1825., 1875.,
                        1925., 1975., 2025., 2075., 2125., 2175., 2225., 2275., 2325.,
                        2375., 2425., 2475., 2525., 2575., 2625., 2675., 2725., 2775.,
                        2825., 2875., 2925., 2975., 3025., 3075., 3125., 3175., 3225.,
                        3275., 3325., 3375., 3425., 3475., 3525., 3575., 3625., 3675.,
                        3725., 3775., 3825., 3875., 3925., 3975., 4025., 4075., 4125.,
                        4175., 4225., 4275., 4325., 4375., 4425., 4475., 4525., 4575.,
                        4625., 4675., 4725., 4775., 4825., 4875.
        ])

        Area_400 = np.array([
                        0.005, 0.015, 0.015, 0.02 , 0.025, 0.03 , 0.035, 0.035, 0.04 ,
                        0.045, 0.05 , 0.055, 0.06 , 0.06 , 0.065, 0.07 , 0.075, 0.08 ,
                        0.085, 0.09 , 0.095, 0.1  , 0.105, 0.11 , 0.115, 0.115, 0.12 ,
                        0.125, 0.13 , 0.13 , 0.135, 0.14 , 0.14 , 0.145, 0.145, 0.15 ,
                        0.15 , 0.155, 0.155, 0.16 , 0.16 , 0.16 , 0.165, 0.165, 0.165,
                        0.165, 0.17 , 0.17 , 0.17 , 0.17 , 0.17 , 0.17 , 0.175, 0.175,
                        0.175, 0.175, 0.175, 0.175, 0.175, 0.175, 0.17 , 0.17 , 0.17 ,
                        0.17 , 0.17 , 0.17 , 0.165, 0.165, 0.165, 0.16 , 0.16 , 0.16 ,
                        0.155, 0.155, 0.15 , 0.15 , 0.145, 0.14 , 0.14 , 0.135, 0.13 ,
                        0.125, 0.125, 0.12 , 0.115, 0.11 , 0.105, 0.1  , 0.09 , 0.085,
                        0.08 , 0.07 , 0.065, 0.06 , 0.05 , 0.03
        ])

        thetal_400 = np.array([
                        299.9854, 299.9864, 299.9889, 299.9907, 299.9927, 299.9949,
                        299.9973, 300.002 , 300.0049, 300.0079, 300.0113, 300.0148,
                        300.0186, 300.0257, 300.0301, 300.0349, 300.04  , 300.0454,
                        300.0512, 300.0574, 300.0639, 300.0709, 300.0783, 300.086 ,
                        300.0942, 300.1074, 300.1167, 300.1265, 300.1367, 300.1529,
                        300.1644, 300.1764, 300.1952, 300.2084, 300.2292, 300.2437,
                        300.2665, 300.2823, 300.3072, 300.3242, 300.3511, 300.3791,
                        300.3977, 300.4276, 300.4586, 300.4906, 300.5106, 300.544 ,
                        300.5781, 300.613 , 300.6486, 300.6847, 300.7039, 300.74  ,
                        300.7764, 300.8129, 300.8493, 300.8856, 300.9217, 300.9573,
                        301.0168, 301.0523, 301.0869, 301.1203, 301.1525, 301.1831,
                        301.2432, 301.2713, 301.2968, 301.3545, 301.3752, 301.3918,
                        301.4434, 301.4515, 301.496 , 301.492 , 301.5252, 301.5513,
                        301.5204, 301.5257, 301.5179, 301.4943, 301.4007, 301.3366,
                        301.2483, 301.1341, 300.994 , 300.8314, 300.6878, 300.5013,
                        300.3284, 300.1959, 300.0811, 300.0159, 299.9933, 299.9866
        ])

        W_400 = np.array([
                        0.3969, 0.5465, 0.7119, 0.8652, 1.0156, 1.1631, 1.3077, 1.4865,
                        1.6298, 1.7699, 1.9067, 2.0399, 2.1693, 2.3626, 2.4887, 2.6101,
                        2.7264, 2.837 , 2.9415, 3.0394, 3.1303, 3.2136, 3.289 , 3.356 ,
                        3.4141, 3.6031, 3.6482, 3.6832, 3.7079, 3.8866, 3.8951, 3.8925,
                        4.0605, 4.0397, 4.2011, 4.1609, 4.3139, 4.2536, 4.3965, 4.3154,
                        4.4467, 4.5751, 4.4633, 4.5779, 4.6883, 4.794 , 4.6402, 4.7298,
                        4.8137, 4.8913, 4.9622, 5.0261, 4.8106, 4.8569, 4.8957, 4.9268,
                        4.9501, 4.9653, 4.9725, 4.9716, 5.2433, 5.2251, 5.1984, 5.1634,
                        5.1202, 5.0691, 5.2844, 5.2145, 5.1371, 5.3198, 5.2239, 5.1213,
                        5.2686, 5.1485, 5.2704, 5.1339, 5.2297, 5.3099, 5.148 , 5.2018,
                        5.2393, 5.2602, 5.0685, 5.0649, 5.0454, 5.0105, 4.9606, 4.8964,
                        4.9554, 4.8545, 4.7428, 4.7211, 4.5815, 4.4371, 4.3516, 4.3221
        ])


        z_200 = np.array([
                          75.,  125.,  175.,  225.,  275.,  325.,  375.,  425.,  475.,
                         525.,  575.,  625.,  675.,  725.,  775.,  825.,  875.,  925.,
                         975., 1025., 1075., 1125., 1175., 1225., 1275., 1325., 1375.,
                        1425., 1475., 1525., 1575., 1625., 1675., 1725., 1775., 1825.,
                        1875., 1925., 1975., 2025., 2075., 2125., 2175., 2225., 2275.,
                        2325., 2375., 2425., 2475., 2525., 2575., 2625., 2675., 2725.,
                        2775., 2825., 2875., 2925., 2975., 3025., 3075., 3125., 3175.,
                        3225., 3275., 3325., 3375., 3425., 3475., 3525., 3575., 3625.,
                        3675., 3725., 3775., 3825., 3875., 3925., 3975., 4025., 4075.,
                        4125., 4175.
        ])

        Area_200 = np.array([
                        0.02 , 0.035, 0.045, 0.055, 0.06 , 0.07 , 0.075, 0.08 , 0.09 ,
                        0.095, 0.1  , 0.105, 0.11 , 0.11 , 0.115, 0.12 , 0.125, 0.125,
                        0.13 , 0.135, 0.135, 0.14 , 0.14 , 0.14 , 0.145, 0.145, 0.15 ,
                        0.15 , 0.15 , 0.155, 0.155, 0.155, 0.155, 0.155, 0.16 , 0.16 ,
                        0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 ,
                        0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.155, 0.155, 0.155, 0.155,
                        0.155, 0.15 , 0.15 , 0.15 , 0.15 , 0.145, 0.145, 0.145, 0.14 ,
                        0.14 , 0.135, 0.135, 0.13 , 0.13 , 0.125, 0.125, 0.12 , 0.115,
                        0.115, 0.11 , 0.105, 0.1  , 0.095, 0.085, 0.08 , 0.07 , 0.06 ,
                        0.05 , 0.025
        ])

        thetal_200 = np.array([
                        299.9859, 299.9894, 299.9945, 300.001 , 300.0105, 300.0194,
                        300.032 , 300.0462, 300.058 , 300.0746, 300.0925, 300.1115,
                        300.1316, 300.1595, 300.182 , 300.2052, 300.229 , 300.2627,
                        300.2879, 300.3133, 300.3504, 300.3766, 300.4156, 300.4559,
                        300.4825, 300.524 , 300.5499, 300.5921, 300.6349, 300.6591,
                        300.7017, 300.7443, 300.7869, 300.8292, 300.8479, 300.8882,
                        300.9277, 300.9661, 301.0032, 301.0387, 301.0725, 301.1042,
                        301.1335, 301.1603, 301.1842, 301.2048, 301.222 , 301.2355,
                        301.2449, 301.2499, 301.2848, 301.2806, 301.2714, 301.2568,
                        301.2367, 301.2458, 301.2142, 301.1769, 301.134 , 301.1184,
                        301.0641, 301.0049, 300.9711, 300.9025, 300.8579, 300.7822,
                        300.729 , 300.6494, 300.5908, 300.5112, 300.4511, 300.3909,
                        300.3182, 300.2626, 300.2099, 300.1611, 300.117 , 300.0832,
                        300.0492, 300.0246, 300.0045, 299.9909, 299.986
        ])

        W_200 = np.array([
                        0.2291, 0.3648, 0.4917, 0.605 , 0.7255, 0.8142, 0.9188, 1.0175,
                        1.0691, 1.1504, 1.2251, 1.2931, 1.3541, 1.4714, 1.5223, 1.5659,
                        1.6019, 1.7103, 1.7348, 1.7517, 1.8518, 1.8564, 1.9515, 2.046 ,
                        2.0324, 2.1203, 2.0936, 2.1741, 2.2526, 2.2067, 2.2766, 2.3439,
                        2.4082, 2.4692, 2.3916, 2.4427, 2.4901, 2.5334, 2.5727, 2.6076,
                        2.6381, 2.664 , 2.6852, 2.7017, 2.7133, 2.72  , 2.7219, 2.7189,
                        2.7111, 2.6985, 2.8295, 2.8063, 2.7784, 2.7461, 2.7095, 2.8106,
                        2.7634, 2.7124, 2.658 , 2.7328, 2.6689, 2.6024, 2.6569, 2.5821,
                        2.6227, 2.5408, 2.5675, 2.4798, 2.4933, 2.4014, 2.4027, 2.3962,
                        2.2987, 2.2821, 2.2586, 2.2287, 2.1928, 2.2091, 2.1577, 2.1477,
                        2.1222, 2.0822, 2.0866
        ])


        z_100 = np.array([
                          75.,  125.,  175.,  225.,  275.,  325.,  375.,  425.,  475.,
                         525.,  575.,  625.,  675.,  725.,  775.,  825.,  875.,  925.,
                         975., 1025., 1075., 1125., 1175., 1225., 1275., 1325., 1375.,
                        1425., 1475., 1525., 1575., 1625., 1675., 1725., 1775., 1825.,
                        1875., 1925., 1975., 2025., 2075., 2125., 2175., 2225., 2275.,
                        2325., 2375., 2425., 2475., 2525., 2575., 2625., 2675., 2725.,
                        2775., 2825., 2875., 2925., 2975., 3025., 3075., 3125., 3175.,
                        3225., 3275., 3325., 3375., 3425., 3475., 3525., 3575., 3625.,
                        3675., 3725., 3775., 3825., 3875., 3925., 3975.
        ])

        Area_100 = np.array([
                        0.035, 0.05 , 0.06 , 0.07 , 0.08 , 0.085, 0.095, 0.1  , 0.105,
                        0.11 , 0.115, 0.115, 0.12 , 0.125, 0.125, 0.13 , 0.135, 0.135,
                        0.14 , 0.14 , 0.14 , 0.145, 0.145, 0.145, 0.15 , 0.15 , 0.15 ,
                        0.15 , 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.16 , 0.16 ,
                        0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 ,
                        0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.15 , 0.15 ,
                        0.15 , 0.15 , 0.145, 0.145, 0.145, 0.14 , 0.14 , 0.135, 0.135,
                        0.135, 0.13 , 0.125, 0.125, 0.12 , 0.115, 0.115, 0.11 , 0.105,
                        0.1  , 0.095, 0.085, 0.08 , 0.07 , 0.055, 0.04
        ])

        thetal_100 = np.array([
                        299.9873, 299.9933, 300.0026, 300.0143, 300.0281, 300.0467,
                        300.0641, 300.0872, 300.1124, 300.1396, 300.1684, 300.2068,
                        300.239 , 300.272 , 300.3168, 300.3516, 300.3864, 300.4351,
                        300.47  , 300.5204, 300.5718, 300.6052, 300.6566, 300.708 ,
                        300.7375, 300.7872, 300.8361, 300.8839, 300.9048, 300.9487,
                        300.9907, 301.0305, 301.0678, 301.1024, 301.1039, 301.1317,
                        301.1561, 301.1769, 301.1939, 301.2069, 301.2159, 301.2206,
                        301.221 , 301.217 , 301.2085, 301.2284, 301.2109, 301.1889,
                        301.1625, 301.132 , 301.0975, 301.0592, 301.0465, 301.0005,
                        300.9514, 300.8998, 300.8712, 300.8143, 300.7559, 300.7185,
                        300.6574, 300.6157, 300.5537, 300.4927, 300.4486, 300.4038,
                        300.3461, 300.3028, 300.2603, 300.2103, 300.1722, 300.1365,
                        300.1035, 300.0738, 300.0511, 300.0282, 300.0114, 299.9991,
                        299.9893
        ])

        W_100 = np.array([
                        0.135 , 0.212 , 0.2833, 0.3454, 0.3979, 0.4576, 0.4933, 0.5419,
                        0.5863, 0.6263, 0.6619, 0.7263, 0.7554, 0.7799, 0.8406, 0.8581,
                        0.871 , 0.9265, 0.9321, 0.9844, 1.0363, 1.0312, 1.0791, 1.1261,
                        1.1099, 1.1522, 1.1931, 1.2324, 1.2017, 1.2356, 1.2677, 1.2977,
                        1.3255, 1.3511, 1.2995, 1.3193, 1.3368, 1.3517, 1.3642, 1.3742,
                        1.3815, 1.3863, 1.3886, 1.3882, 1.3854, 1.4574, 1.4489, 1.438 ,
                        1.4246, 1.409 , 1.3911, 1.3711, 1.4209, 1.3956, 1.3685, 1.3398,
                        1.376 , 1.3426, 1.3081, 1.334 , 1.2956, 1.3145, 1.2727, 1.2306,
                        1.2402, 1.2458, 1.1995, 1.1991, 1.1949, 1.1462, 1.1371, 1.1247,
                        1.1093, 1.0909, 1.0981, 1.0722, 1.0666, 1.0712, 1.0602
        ])


        z_50 = np.array([
                          75.,  125.,  175.,  225.,  275.,  325.,  375.,  425.,  475.,
                         525.,  575.,  625.,  675.,  725.,  775.,  825.,  875.,  925.,
                         975., 1025., 1075., 1125., 1175., 1225., 1275., 1325., 1375.,
                        1425., 1475., 1525., 1575., 1625., 1675., 1725., 1775., 1825.,
                        1875., 1925., 1975., 2025., 2075., 2125., 2175., 2225., 2275.,
                        2325., 2375., 2425., 2475., 2525., 2575., 2625., 2675., 2725.,
                        2775., 2825., 2875., 2925., 2975., 3025., 3075., 3125., 3175.,
                        3225., 3275., 3325., 3375., 3425., 3475., 3525., 3575., 3625.,
                        3675., 3725., 3775., 3825., 3875., 3925., 3975.
        ])

        Area_50 = np.array([
                        0.035, 0.055, 0.065, 0.075, 0.085, 0.09 , 0.095, 0.105, 0.105,
                        0.11 , 0.115, 0.12 , 0.125, 0.125, 0.13 , 0.13 , 0.135, 0.135,
                        0.14 , 0.14 , 0.145, 0.145, 0.145, 0.15 , 0.15 , 0.15 , 0.15 ,
                        0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.16 , 0.16 , 0.16 ,
                        0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 , 0.16 ,
                        0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.155, 0.15 , 0.15 ,
                        0.15 , 0.145, 0.145, 0.145, 0.14 , 0.14 , 0.14 , 0.135, 0.135,
                        0.13 , 0.13 , 0.125, 0.12 , 0.12 , 0.115, 0.11 , 0.105, 0.1  ,
                        0.095, 0.09 , 0.08 , 0.07 , 0.06 , 0.045, 0.01
        ])

        thetal_50 = np.array([
                        299.9882, 299.9949, 300.0058, 300.0195, 300.0355, 300.057 ,
                        300.0816, 300.1036, 300.1386, 300.1704, 300.204 , 300.2388,
                        300.2748, 300.3228, 300.3607, 300.4125, 300.451 , 300.505 ,
                        300.5428, 300.5976, 300.6334, 300.6876, 300.7417, 300.7724,
                        300.8239, 300.8741, 300.9229, 300.9429, 300.9866, 301.0278,
                        301.0663, 301.1017, 301.1339, 301.1315, 301.1559, 301.1765,
                        301.1931, 301.2055, 301.2138, 301.2177, 301.2173, 301.2125,
                        301.2033, 301.1899, 301.1722, 301.182 , 301.1557, 301.1255,
                        301.0916, 301.0543, 301.0137, 300.9703, 300.9509, 300.9015,
                        300.8502, 300.821 , 300.7656, 300.7094, 300.6731, 300.6151,
                        300.5575, 300.5173, 300.4604, 300.4193, 300.3648, 300.3244,
                        300.2844, 300.2358, 300.199 , 300.1638, 300.1307, 300.1   ,
                        300.0722, 300.0476, 300.029 , 300.0129, 299.9997, 299.9906,
                        299.9854
        ])

        W_50 = np.array([
                        0.0768, 0.1179, 0.1571, 0.1909, 0.2191, 0.2515, 0.2814, 0.2959,
                        0.3339, 0.3564, 0.3762, 0.3935, 0.4082, 0.4419, 0.4526, 0.485 ,
                        0.4916, 0.5223, 0.5246, 0.5534, 0.5514, 0.578 , 0.604 , 0.5958,
                        0.6192, 0.6419, 0.6636, 0.6474, 0.6662, 0.6839, 0.7005, 0.7159,
                        0.7301, 0.7023, 0.7133, 0.7229, 0.7313, 0.7382, 0.7438, 0.7479,
                        0.7507, 0.752 , 0.7519, 0.7505, 0.7477, 0.7852, 0.7793, 0.7722,
                        0.7638, 0.7541, 0.7434, 0.7316, 0.7568, 0.7422, 0.7267, 0.7464,
                        0.7284, 0.7097, 0.7239, 0.7031, 0.682 , 0.6908, 0.6681, 0.6734,
                        0.6495, 0.6514, 0.6513, 0.6257, 0.6227, 0.6179, 0.6112, 0.6029,
                        0.593 , 0.5816, 0.5829, 0.5799, 0.5728, 0.5696, 0.5712
        ])

        Area_in = np.interp(self.Gr.z_half,z_in,Area_in)
        W_in = np.interp(self.Gr.z_half,z_in,W_in)
        thetal_in = np.interp(self.Gr.z_half,z_in,thetal_in)
        T_in = np.interp(self.Gr.z_half,z_in,T_in)

        # # 800
        # z_in = z_800
        # Area_in = np.interp(self.Gr.z_half,z_800,Area_800)
        # W_in = np.interp(self.Gr.z_half,z_800,W_800)
        # thetal_in = np.interp(self.Gr.z_half,z_800,thetal_800)

        # # 600
        # z_in = z_600
        # Area_in = np.interp(self.Gr.z_half,z_600,Area_600)
        # W_in = np.interp(self.Gr.z_half,z_600,W_600)
        # thetal_in = np.interp(self.Gr.z_half,z_600,thetal_600)

        # # 400
        # z_in = z_400
        # Area_in = np.interp(self.Gr.z_half,z_400,Area_400)
        # W_in = np.interp(self.Gr.z_half,z_400,W_400)
        # thetal_in = np.interp(self.Gr.z_half,z_400,thetal_400)

        # # 200
        # z_in = z_200
        # Area_in = np.interp(self.Gr.z_half,z_200,Area_200)
        # W_in = np.interp(self.Gr.z_half,z_200,W_200)
        # thetal_in = np.interp(self.Gr.z_half,z_200,thetal_200)

        # # 100
        # z_in = z_100
        # Area_in = np.interp(self.Gr.z_half,z_100,Area_100)
        # W_in = np.interp(self.Gr.z_half,z_100,W_100)
        # thetal_in = np.interp(self.Gr.z_half,z_100,thetal_100)

        # # 50
        # z_in = z_50
        # Area_in = np.interp(self.Gr.z_half,z_50,Area_50)
        # W_in = np.interp(self.Gr.z_half,z_50,W_50)
        # thetal_in = np.interp(self.Gr.z_half,z_50,thetal_50)

        for i in xrange(self.n_updrafts):
            for k in xrange(self.Gr.nzg):
                if z_in.min()<=self.Gr.z_half[k]<=z_in.max():
                    self.W.values[i,k] = 0.0
                    # self.W.values[i,k] = W_in[k]
                    self.Area.values[i,k] = Area_in[k]
                    self.H.values[i,k] = thetal_in[k]
                    self.QT.values[i,k] = 0.0
                    self.QL.values[i,k] = 0.0

                    sa = eos(
                        t_to_thetali_c,
                        eos_first_guess_thetal,
                        Ref.p0_half[k],
                        self.QT.values[i,k],
                        self.H.values[i,k]
                    )
                    self.T.values[i,k] = sa.T
                else:
                    self.Area.values[i,k] = 0.0 #self.updraft_fraction/self.n_updrafts
                    self.W.values[i,k] = 0.0
                    self.H.values[i,k] = GMV.THL.values[k]
                    self.T.values[i,k] = GMV.T.values[k]

        self.QT.set_bcs(self.Gr)
        self.H.set_bcs(self.Gr)
        self.W.set_bcs(self.Gr)
        self.T.set_bcs(self.Gr)

        self.set_means(GMV)

        return


    cpdef initialize_io(self, NetCDFIO_Stats Stats):
        Stats.add_profile('updraft_area')
        Stats.add_profile('updraft_w')
        Stats.add_profile('updraft_qt')
        Stats.add_profile('updraft_ql')
        Stats.add_profile('updraft_RH')

        if self.H.name == 'thetal':
            Stats.add_profile('updraft_thetal')
        else:
            # Stats.add_profile('updraft_thetal')
            Stats.add_profile('updraft_s')

        Stats.add_profile('updraft_temperature')
        Stats.add_profile('updraft_buoyancy')

        Stats.add_profile('updraft_cloud_fraction')

        Stats.add_ts('updraft_cloud_cover')
        Stats.add_ts('updraft_cloud_base')
        Stats.add_ts('updraft_cloud_top')
        Stats.add_ts('updraft_lwp')
        return

    cpdef set_means(self, GridMeanVariables GMV):

        cdef:
            Py_ssize_t i, k

        self.Area.bulkvalues = np.sum(self.Area.values,axis=0)
        self.W.bulkvalues[:] = 0.0
        self.QT.bulkvalues[:] = 0.0
        self.QL.bulkvalues[:] = 0.0
        self.H.bulkvalues[:] = 0.0
        self.T.bulkvalues[:] = 0.0
        self.B.bulkvalues[:] = 0.0
        self.RH.bulkvalues[:] = 0.0

        with nogil:
            for k in xrange(self.Gr.gw, self.Gr.nzg-self.Gr.gw):
                if self.Area.bulkvalues[k] > 1.0e-20:
                    for i in xrange(self.n_updrafts):
                        self.QT.bulkvalues[k] += self.Area.values[i,k] * self.QT.values[i,k]/self.Area.bulkvalues[k]
                        self.QL.bulkvalues[k] += self.Area.values[i,k] * self.QL.values[i,k]/self.Area.bulkvalues[k]
                        self.H.bulkvalues[k] += self.Area.values[i,k] * self.H.values[i,k]/self.Area.bulkvalues[k]
                        self.T.bulkvalues[k] += self.Area.values[i,k] * self.T.values[i,k]/self.Area.bulkvalues[k]
                        self.RH.bulkvalues[k] += self.Area.values[i,k] * self.RH.values[i,k]/self.Area.bulkvalues[k]
                        self.B.bulkvalues[k] += self.Area.values[i,k] * self.B.values[i,k]/self.Area.bulkvalues[k]
                        self.W.bulkvalues[k] += ((self.Area.values[i,k] + self.Area.values[i,k+1]) * self.W.values[i,k]
                                            /(self.Area.bulkvalues[k] + self.Area.bulkvalues[k+1]))

                else:
                    self.QT.bulkvalues[k] = GMV.QT.values[k]
                    self.QL.bulkvalues[k] = 0.0
                    self.H.bulkvalues[k] = GMV.H.values[k]
                    self.RH.bulkvalues[k] = GMV.RH.values[k]
                    self.T.bulkvalues[k] = GMV.T.values[k]
                    self.B.bulkvalues[k] = 0.0
                    self.W.bulkvalues[k] = 0.0

                if self.QL.bulkvalues[k] > 1e-8 and self.Area.bulkvalues[k] > 1e-3:
                    self.cloud_fraction[k] = 1.0
                else:
                    self.cloud_fraction[k] = 0.
        return

    # quick utility to set "new" arrays with values in the "values" arrays
    cpdef set_new_with_values(self):
        with nogil:
            for i in xrange(self.n_updrafts):
                for k in xrange(self.Gr.nzg):
                    self.W.new[i,k] = self.W.values[i,k]
                    self.Area.new[i,k] = self.Area.values[i,k]
                    self.QT.new[i,k] = self.QT.values[i,k]
                    self.QL.new[i,k] = self.QL.values[i,k]
                    self.H.new[i,k] = self.H.values[i,k]
                    self.THL.new[i,k] = self.THL.values[i,k]
                    self.T.new[i,k] = self.T.values[i,k]
                    self.B.new[i,k] = self.B.values[i,k]
        return

    # quick utility to set "new" arrays with values in the "values" arrays
    cpdef set_old_with_values(self):
        with nogil:
            for i in xrange(self.n_updrafts):
                for k in xrange(self.Gr.nzg):
                    self.W.old[i,k] = self.W.values[i,k]
                    self.Area.old[i,k] = self.Area.values[i,k]
                    self.QT.old[i,k] = self.QT.values[i,k]
                    self.QL.old[i,k] = self.QL.values[i,k]
                    self.H.old[i,k] = self.H.values[i,k]
                    self.THL.old[i,k] = self.THL.values[i,k]
                    self.T.old[i,k] = self.T.values[i,k]
                    self.B.old[i,k] = self.B.values[i,k]
        return

    # quick utility to set "tmp" arrays with values in the "new" arrays
    cpdef set_values_with_new(self):
        with nogil:
            for i in xrange(self.n_updrafts):
                for k in xrange(self.Gr.nzg):
                    self.W.values[i,k] = self.W.new[i,k]
                    self.Area.values[i,k] = self.Area.new[i,k]
                    self.QT.values[i,k] = self.QT.new[i,k]
                    self.QL.values[i,k] = self.QL.new[i,k]
                    self.H.values[i,k] = self.H.new[i,k]
                    self.THL.values[i,k] = self.THL.new[i,k]
                    self.T.values[i,k] = self.T.new[i,k]
                    self.B.values[i,k] = self.B.new[i,k]
        return

    cpdef io(self, NetCDFIO_Stats Stats, ReferenceState.ReferenceState Ref):

        Stats.write_profile('updraft_area', self.Area.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        Stats.write_profile('updraft_w', self.W.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        Stats.write_profile('updraft_qt', self.QT.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        Stats.write_profile('updraft_ql', self.QL.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        Stats.write_profile('updraft_RH', self.RH.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])

        if self.H.name == 'thetal':
            Stats.write_profile('updraft_thetal', self.H.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        else:
            Stats.write_profile('updraft_s', self.H.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
            #Stats.write_profile('updraft_thetal', self.THL.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])

        Stats.write_profile('updraft_temperature', self.T.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        Stats.write_profile('updraft_buoyancy', self.B.bulkvalues[self.Gr.gw:self.Gr.nzg-self.Gr.gw])

        self.upd_cloud_diagnostics(Ref)
        Stats.write_profile('updraft_cloud_fraction', self.cloud_fraction[self.Gr.gw:self.Gr.nzg-self.Gr.gw])
        # Note definition of cloud cover : each updraft is associated with a cloud cover equal to the maximum
        # area fraction of the updraft where ql > 0. Each updraft is assumed to have maximum overlap with respect to
        # itself (i.e. no consideration of tilting due to shear) while the updraft classes are assumed to have no overlap
        # at all. Thus total updraft cover is the sum of each updraft's cover
        Stats.write_ts('updraft_cloud_cover', np.sum(self.cloud_cover))
        Stats.write_ts('updraft_cloud_base',  np.amin(self.cloud_base))
        Stats.write_ts('updraft_cloud_top',   np.amax(self.cloud_top))
        Stats.write_ts('updraft_lwp',         self.lwp)
        return

    cpdef upd_cloud_diagnostics(self, ReferenceState.ReferenceState Ref):
        cdef Py_ssize_t i, k
        self.lwp = 0.

        for i in xrange(self.n_updrafts):
            #TODO check the setting of ghost point z_half

            self.cloud_base[i] = self.Gr.z_half[self.Gr.nzg-self.Gr.gw-1]
            self.cloud_top[i] = 0.0
            self.updraft_top[i] = 0.0
            self.cloud_cover[i] = 0.0

            for k in xrange(self.Gr.gw,self.Gr.nzg-self.Gr.gw):

                if self.Area.values[i,k] > 1e-3:
                    self.updraft_top[i] = fmax(self.updraft_top[i], self.Gr.z_half[k])
                    self.lwp += Ref.rho0_half[k] * self.QL.values[i,k] * self.Area.values[i,k] * self.Gr.dz

                    if self.QL.values[i,k] > 1e-8:
                        self.cloud_base[i]  = fmin(self.cloud_base[i],  self.Gr.z_half[k])
                        self.cloud_top[i]   = fmax(self.cloud_top[i],   self.Gr.z_half[k])
                        self.cloud_cover[i] = fmax(self.cloud_cover[i], self.Area.values[i,k])

        return


cdef class UpdraftThermodynamics:
    def __init__(self, n_updraft, Grid.Grid Gr,
                 ReferenceState.ReferenceState Ref, UpdraftVariables UpdVar,
                 RainVariables Rain):
        self.Gr = Gr
        self.Ref = Ref
        self.n_updraft = n_updraft

        if UpdVar.H.name == 's':
            self.t_to_prog_fp = t_to_entropy_c
            self.prog_to_t_fp = eos_first_guess_entropy
        elif UpdVar.H.name == 'thetal':
            self.t_to_prog_fp = t_to_thetali_c
            self.prog_to_t_fp = eos_first_guess_thetal

        # rain source from each updraft from all sub-timesteps
        self.prec_source_h  = np.zeros((n_updraft, Gr.nzg), dtype=np.double, order='c')
        self.prec_source_qt = np.zeros((n_updraft, Gr.nzg), dtype=np.double, order='c')

        # rain source from all updrafts from all sub-timesteps
        self.prec_source_h_tot  = np.zeros((Gr.nzg,), dtype=np.double, order='c')
        self.prec_source_qt_tot = np.zeros((Gr.nzg,), dtype=np.double, order='c')

        return

    cpdef clear_precip_sources(self):
        """
        clear precipitation source terms for QT and H from each updraft
        """
        self.prec_source_qt[:,:] = 0.
        self.prec_source_h[:,:]  = 0.
        return

    cpdef update_total_precip_sources(self):
        """
        sum precipitation source terms for QT and H from all sub-timesteps
        """
        self.prec_source_h_tot  = np.sum(self.prec_source_h,  axis=0)
        self.prec_source_qt_tot = np.sum(self.prec_source_qt, axis=0)
        return

    cpdef buoyancy(self, UpdraftVariables UpdVar, EnvironmentVariables EnvVar,
                   GridMeanVariables GMV, bint extrap):
        cdef:
            Py_ssize_t k, i
            double rho, qv, qt, t, h
            Py_ssize_t gw = self.Gr.gw

        UpdVar.Area.bulkvalues = np.sum(UpdVar.Area.values,axis=0)

        if not extrap:
            with nogil:
                for i in xrange(self.n_updraft):
                    for k in xrange(self.Gr.nzg):
                        if UpdVar.Area.values[i,k] > 0.0:
                            qv = UpdVar.QT.values[i,k] - UpdVar.QL.values[i,k]
                            rho = rho_c(self.Ref.p0_half[k], UpdVar.T.values[i,k], UpdVar.QT.values[i,k], qv)
                            UpdVar.B.values[i,k] = buoyancy_c(self.Ref.rho0_half[k], rho)
                        else:
                            UpdVar.B.values[i,k] = EnvVar.B.values[k]
                        UpdVar.RH.values[i,k] = relative_humidity_c(self.Ref.p0_half[k], UpdVar.QT.values[i,k],
                                                    UpdVar.QL.values[i,k], 0.0, UpdVar.T.values[i,k])
        else:
            with nogil:
                for i in xrange(self.n_updraft):
                    for k in xrange(self.Gr.gw, self.Gr.nzg-self.Gr.gw):
                        if UpdVar.Area.values[i,k] > 0.0:
                            qt = UpdVar.QT.values[i,k]
                            qv = UpdVar.QT.values[i,k] - UpdVar.QL.values[i,k]
                            h = UpdVar.H.values[i,k]
                            t = UpdVar.T.values[i,k]
                            rho = rho_c(self.Ref.p0_half[k], t, qt, qv)
                            UpdVar.B.values[i,k] = buoyancy_c(self.Ref.rho0_half[k], rho)
                            UpdVar.RH.values[i,k] = relative_humidity_c(self.Ref.p0_half[k], qt, qt-qv, 0.0, t)
                        elif UpdVar.Area.values[i,k-1] > 0.0 and k>self.Gr.gw:
                            sa = eos(self.t_to_prog_fp, self.prog_to_t_fp, self.Ref.p0_half[k],
                                     qt, h)
                            qt -= sa.ql
                            qv = qt
                            t = sa.T
                            rho = rho_c(self.Ref.p0_half[k], t, qt, qv)
                            UpdVar.B.values[i,k] = buoyancy_c(self.Ref.rho0_half[k], rho)
                            UpdVar.RH.values[i,k] = relative_humidity_c(self.Ref.p0_half[k], qt, qt-qv, 0.0, t)
                        else:
                            UpdVar.B.values[i,k] = EnvVar.B.values[k]
                            UpdVar.RH.values[i,k] = EnvVar.RH.values[k]


        with nogil:
            for k in xrange(self.Gr.gw, self.Gr.nzg-self.Gr.gw):
                GMV.B.values[k] = (1.0 - UpdVar.Area.bulkvalues[k]) * EnvVar.B.values[k]
                for i in xrange(self.n_updraft):
                    GMV.B.values[k] += UpdVar.Area.values[i,k] * UpdVar.B.values[i,k]
                for i in xrange(self.n_updraft):
                    UpdVar.B.values[i,k] -= GMV.B.values[k]
                EnvVar.B.values[k] -= GMV.B.values[k]

        return

    cpdef microphysics(self, UpdraftVariables UpdVar, RainVariables Rain, double dt):
        """
        compute precipitation source terms
        """
        cdef:
            Py_ssize_t k, i

            rain_struct rst
            mph_struct  mph
            eos_struct  sa

        with nogil:
            for i in xrange(self.n_updraft):
                for k in xrange(self.Gr.nzg):

                    # autoconversion and accretion
                    mph = microphysics_rain_src(
                        Rain.rain_model,
                        UpdVar.QT.new[i,k],
                        UpdVar.QL.new[i,k],
                        Rain.Upd_QR.values[k],
                        UpdVar.Area.new[i,k],
                        UpdVar.T.new[i,k],
                        self.Ref.p0_half[k],
                        self.Ref.rho0_half[k],
                        dt
                    )

                    # update Updraft.new
                    UpdVar.QT.new[i,k] = mph.qt
                    UpdVar.QL.new[i,k] = mph.ql
                    UpdVar.H.new[i,k]  = mph.thl

                    # update rain sources of state variables
                    self.prec_source_qt[i,k] -= mph.qr_src * UpdVar.Area.new[i,k]
                    self.prec_source_h[i,k]  += mph.thl_rain_src * UpdVar.Area.new[i,k]
        return
